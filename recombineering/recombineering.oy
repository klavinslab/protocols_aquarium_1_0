#Task needs fields
#logCultures - list of overnights to be put into flasks
#dna - list of dna to transform
#strains - list of strains to transform into
#plates - list of plates to plate on
#
# dna, strains, and plates are all lists who's indices correspond to the same
# transformation.  ie dna[n] is transformed into strain strains[n] onto plate
# plates[n]

base_dir = "recombineering/"
technician = "msummers"

argument
  task_name: string, "ready task to run.  If empty or mistyped choose any single task that is ready."
  #tech: string, "user name of tech to run protocols."
end

#TODO: add protocol to setup 42C bath and 4C centrifuge
place parse_args
  marked: true
end

place make_log_phase
#  protocol: base_dir+"make_log_phase.rb"
  protocol: base_dir+"make_log_phase.pl"
  argument
    params: params
  end
  group: "technicians" 
  start: now()
end


place finish_log_phase
	protocol: base_dir+"finish_log_phase.pl"	
	start: hours(2)
	window: minutes(30)
	group: technician
end


wire (make_log_phase, "params") => (finish_log_phase, "params") 

place heat_shock
  protocol: base_dir+"heat_shock.pl"
  group: technician
  start: now()
  window: minutes(10)
end

#wire (make_log_phase, "params") => (heat_shock, "params")
wire (finish_log_phase, "params") => (heat_shock, "params")

place quick_comp
  protocol: base_dir+"quick_comp.pl"
  group: technician
  start: now()
  window: minutes(1)
end

wire (heat_shock,"params") => (quick_comp,"params")

place transform
  protocol: base_dir+"transform.pl"
  argument
    #fragment_id: params[:ldna]
    dna_vol: 2
    #strain_list: params[:strains]
  end
  group: technician
  start: now()
  window: minutes(1)
end

wire (quick_comp,"params") => (transform,"params")

place plate
  protocol: base_dir+"plate.pl"
  group: "technicians"
  start: hours(3)
  window: hours(1)
end

wire (transform,"params") => (plate,"params")


# forward transitions
transition [parse_args] => [make_log_phase] when true 
  do
    tsk = tasks("recombineering", "ready")
    #if task named task_name is ready then run with it
    #otherwise just start running the last task in the list
    ii = 0
    #TODO: fix searching for the correct task, it looks like while doesn't work
    #      in oyster
    #while ii<length(tsk)
    #  ii = ii+1
    #end
    choosen_task = tsk[ii]
    useless_variable = set_task_status(choosen_task,"running")
    params = tsk[ii][:specification]
  end
end

transition [make_log_phase] => [finish_log_phase] when !error(0) && completed(0) end 
transition [finish_log_phase] => [heat_shock] when !error(0) && completed(0) end

transition [heat_shock] => [quick_comp] when !error(0) && completed(0) end 
transition [quick_comp] => [transform] when !error(0) && completed(0) end 
transition [transform] => [plate] when !error(0) && completed(0) end 
transition [plate] => [] when !error(0) && completed(0) 
  do
    useless_variable = set_task_status(choosen_task,"done")
  end
end

# remaining reverse transitions
transition [make_log_phase] => [make_log_phase] when error(0) end 
transition [finish_log_phase] => [make_log_phase] when error(0) end 

transition [heat_shock] => [heat_shock] when error(0) end 
transition [quick_comp] => [quick_comp] when error(0) end 
transition [transform] => [transform] when error(0) end 
transition [plate] => [plate] when error(0) end
#transition [boil_cells] => [boil_cells] when error(0) end
#transition [pcr_prepare] => [pcr_prepare] when error(0) end
#transition [pour_gels] => [pour_gels] when error(0) end
#transition [run_gels] => [run_gels] when error(0) end
#transition [image_gels] => [image_gels] when error(0) end

