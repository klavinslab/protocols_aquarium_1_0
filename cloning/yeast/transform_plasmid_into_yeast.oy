argument
  strains_id: sample array, "Enter strains you want to transform into."
  aliquots_number: number array, "Enter the number of transformations into each strain"
  
  plasmids: sample("Plasmid") array, "Enter the plasmids you want transformed into the strains above. Each transformation should have an associated plasmid."
  pmei: sample("Enzyme"), "Tube of PMEI to be used."
  cutsmart: sample("Enzyme Buffer"), "Tube of Cutsmart to be used."
  initials: string, "Your initials or another 2-3 letter identifier for tube labeling"
  
  plate_type: number array, "Enter a number that corresponds to a given plate type for each transformation. 1= -His Plate, 2= -Trp Plate, 3= -Ura Plate, 4= -Leu Plate"
  rescue_vol: number, "Enter the amount of molecular grade water you would like to resuce the competent aliquots with."
  products: string array, "The exact name of each strain the transformations will produce."

end

  frozen_aliquots: sample("Yeast Strain") array, "Enter in the frozen aliquots you would like to transform your digested plasmids into."

  digested_plasmids: sample("Plasmid") array, "Enter the digested plasmid samples you want transformed into the strains above."

place innoculate
  protocol: "cloning/yeast/innoculate_compcell_culture.pl"
  argument
    strains_id: strains_id
  end
  group: "technicians"
  marked: true
  start: now()
  window: hours(20)
end

place digest
  protocol: "cloning/yeast/pmeI_Digest.pl"
  argument
    plasmids: plasmids
    pmei: pmei
    cutsmart: cutsmart
    initials: initials
  end
  group: "technicians"
  marked: true
  start: now()
  window: hours(20)
end

place makecompcell
  protocol: "cloning/yeast/Make_yeast_compcells_fresh.pl"
  argument
    aliquots_number: aliquots_number
  end
  group: "technicians"
  start: now()
  window: hours(20)
end




wire (innoculate,"yeast_50ml_culture_id") => (makecompcell,"cultures_id")
wire (

transition [innoculate] => [makecompcell] when !error(0) && completed(0) && hours_elapsed(0,5) end
